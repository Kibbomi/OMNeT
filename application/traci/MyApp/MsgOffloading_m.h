//
// Generated file, do not edit! Created by nedtool 5.6 from veins/modules/application/traci/MyApp/MsgOffloading.msg.
//

#ifndef __VEINS_MSGOFFLOADING_M_H
#define __VEINS_MSGOFFLOADING_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0506
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif

// dll export symbol
#ifndef VEINS_API
#  if defined(VEINS_EXPORT)
#    define VEINS_API  OPP_DLLEXPORT
#  elif defined(VEINS_IMPORT)
#    define VEINS_API  OPP_DLLIMPORT
#  else
#    define VEINS_API
#  endif
#endif

// cplusplus {{
#include "veins/base/utils/Coord.h"
#include "veins/modules/utility/Consts80211p.h"
#include "veins/modules/messages/BaseFrame1609_4_m.h"
#include "veins/base/utils/SimpleAddress.h"
// }}


namespace veins {

/**
 * Class generated from <tt>veins/modules/application/traci/MyApp/MsgOffloading.msg:30</tt> by nedtool.
 * <pre>
 * packet MsgOffloading extends BaseFrame1609_4
 * {
 *     int x;
 *     int y;
 *     int ret;
 * }
 * </pre>
 */
class VEINS_API MsgOffloading : public ::veins::BaseFrame1609_4
{
  protected:
    int x;
    int y;
    int ret;

  private:
    void copy(const MsgOffloading& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const MsgOffloading&);

  public:
    MsgOffloading(const char *name=nullptr, short kind=0);
    MsgOffloading(const MsgOffloading& other);
    virtual ~MsgOffloading();
    MsgOffloading& operator=(const MsgOffloading& other);
    virtual MsgOffloading *dup() const override {return new MsgOffloading(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getX() const;
    virtual void setX(int x);
    virtual int getY() const;
    virtual void setY(int y);
    virtual int getRet() const;
    virtual void setRet(int ret);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const MsgOffloading& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, MsgOffloading& obj) {obj.parsimUnpack(b);}

} // namespace veins

#endif // ifndef __VEINS_MSGOFFLOADING_M_H

