//
// Generated file, do not edit! Created by nedtool 5.6 from veins/modules/application/traci/RSUCluster/CarComputationOffloading.msg.
//

#ifndef __VEINS_CARCOMPUTATIONOFFLOADING_M_H
#define __VEINS_CARCOMPUTATIONOFFLOADING_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0506
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif

// dll export symbol
#ifndef VEINS_API
#  if defined(VEINS_EXPORT)
#    define VEINS_API  OPP_DLLEXPORT
#  elif defined(VEINS_IMPORT)
#    define VEINS_API  OPP_DLLIMPORT
#  else
#    define VEINS_API
#  endif
#endif

// cplusplus {{
#include "veins/base/utils/Coord.h"
#include "veins/modules/utility/Consts80211p.h"
#include "veins/modules/messages/BaseFrame1609_4_m.h"
#include "veins/base/utils/SimpleAddress.h"
// }}


namespace veins {

/**
 * Class generated from <tt>veins/modules/application/traci/RSUCluster/CarComputationOffloading.msg:30</tt> by nedtool.
 * <pre>
 * packet CarCOReq extends BaseFrame1609_4
 * {
 *     //Car information
 *     double x;
 *     double y;
 *     int direction;
 *     double speed;
 *     string carName;
 * 
 *     //Task information
 *     int taskID;
 *     double constraint;
 *     int requiredCycle;
 *     int taskCode;
 * 
 *     //Packet information
 *     simtime_t reqTime;
 * 
 * }
 * </pre>
 */
class VEINS_API CarCOReq : public ::veins::BaseFrame1609_4
{
  protected:
    double x;
    double y;
    int direction;
    double speed;
    ::omnetpp::opp_string carName;
    int taskID;
    double constraint;
    int requiredCycle;
    int taskCode;
    ::omnetpp::simtime_t reqTime;

  private:
    void copy(const CarCOReq& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const CarCOReq&);

  public:
    CarCOReq(const char *name=nullptr, short kind=0);
    CarCOReq(const CarCOReq& other);
    virtual ~CarCOReq();
    CarCOReq& operator=(const CarCOReq& other);
    virtual CarCOReq *dup() const override {return new CarCOReq(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual double getX() const;
    virtual void setX(double x);
    virtual double getY() const;
    virtual void setY(double y);
    virtual int getDirection() const;
    virtual void setDirection(int direction);
    virtual double getSpeed() const;
    virtual void setSpeed(double speed);
    virtual const char * getCarName() const;
    virtual void setCarName(const char * carName);
    virtual int getTaskID() const;
    virtual void setTaskID(int taskID);
    virtual double getConstraint() const;
    virtual void setConstraint(double constraint);
    virtual int getRequiredCycle() const;
    virtual void setRequiredCycle(int requiredCycle);
    virtual int getTaskCode() const;
    virtual void setTaskCode(int taskCode);
    virtual ::omnetpp::simtime_t getReqTime() const;
    virtual void setReqTime(::omnetpp::simtime_t reqTime);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const CarCOReq& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, CarCOReq& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>veins/modules/application/traci/RSUCluster/CarComputationOffloading.msg:50</tt> by nedtool.
 * <pre>
 * packet CarCOResp extends BaseFrame1609_4
 * {
 *     int taskID;
 *     int COResult;
 * }
 * </pre>
 */
class VEINS_API CarCOResp : public ::veins::BaseFrame1609_4
{
  protected:
    int taskID;
    int COResult;

  private:
    void copy(const CarCOResp& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const CarCOResp&);

  public:
    CarCOResp(const char *name=nullptr, short kind=0);
    CarCOResp(const CarCOResp& other);
    virtual ~CarCOResp();
    CarCOResp& operator=(const CarCOResp& other);
    virtual CarCOResp *dup() const override {return new CarCOResp(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getTaskID() const;
    virtual void setTaskID(int taskID);
    virtual int getCOResult() const;
    virtual void setCOResult(int COResult);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const CarCOResp& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, CarCOResp& obj) {obj.parsimUnpack(b);}

} // namespace veins

#endif // ifndef __VEINS_CARCOMPUTATIONOFFLOADING_M_H

