//
// Generated file, do not edit! Created by nedtool 5.6 from inet/applications/ethernet/MyEthernetExample/MyEtherMsg.msg.
//

#ifndef __INET_MYETHERMSG_M_H
#define __INET_MYETHERMSG_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0506
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif

// dll export symbol
#ifndef INET_API
#  if defined(INET_EXPORT)
#    define INET_API  OPP_DLLEXPORT
#  elif defined(INET_IMPORT)
#    define INET_API  OPP_DLLIMPORT
#  else
#    define INET_API
#  endif
#endif


namespace inet {

class MyEtherAppReq;
class MyEtherAppResp;
} // namespace inet

#include "inet/common/INETDefs_m.h" // import inet.common.INETDefs

#include "inet/common/packet/chunk/Chunk_m.h" // import inet.common.packet.chunk.Chunk


namespace inet {

/**
 * Class generated from <tt>inet/applications/ethernet/MyEthernetExample/MyEtherMsg.msg:27</tt> by nedtool.
 * <pre>
 * //
 * // Request packet sent by ~EtherAppClient. Contains the number of bytes to be
 * // sent back as response; if this value is greater than ~1400, the reply
 * // will consist of several Ethernet frames. See also ~EtherAppResp.
 * //
 * class MyEtherAppReq extends FieldsChunk
 * {
 *     long requestId;
 *     long responseBytes;
 *     int hello;
 * }
 * </pre>
 */
class INET_API MyEtherAppReq : public ::inet::FieldsChunk
{
  protected:
    long requestId = 0;
    long responseBytes = 0;
    int hello = 0;

  private:
    void copy(const MyEtherAppReq& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const MyEtherAppReq&);

  public:
    MyEtherAppReq();
    MyEtherAppReq(const MyEtherAppReq& other);
    virtual ~MyEtherAppReq();
    MyEtherAppReq& operator=(const MyEtherAppReq& other);
    virtual MyEtherAppReq *dup() const override {return new MyEtherAppReq(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual long getRequestId() const;
    virtual void setRequestId(long requestId);
    virtual long getResponseBytes() const;
    virtual void setResponseBytes(long responseBytes);
    virtual int getHello() const;
    virtual void setHello(int hello);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const MyEtherAppReq& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, MyEtherAppReq& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>inet/applications/ethernet/MyEthernetExample/MyEtherMsg.msg:37</tt> by nedtool.
 * <pre>
 * //
 * // Packet sent back by ~EtherAppServer in response to an ~EtherAppReq.
 * //
 * class MyEtherAppResp extends FieldsChunk
 * {
 *     int requestId;
 *     int numFrames;
 *     int hello;
 * }
 * </pre>
 */
class INET_API MyEtherAppResp : public ::inet::FieldsChunk
{
  protected:
    int requestId = 0;
    int numFrames = 0;
    int hello = 0;

  private:
    void copy(const MyEtherAppResp& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const MyEtherAppResp&);

  public:
    MyEtherAppResp();
    MyEtherAppResp(const MyEtherAppResp& other);
    virtual ~MyEtherAppResp();
    MyEtherAppResp& operator=(const MyEtherAppResp& other);
    virtual MyEtherAppResp *dup() const override {return new MyEtherAppResp(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getRequestId() const;
    virtual void setRequestId(int requestId);
    virtual int getNumFrames() const;
    virtual void setNumFrames(int numFrames);
    virtual int getHello() const;
    virtual void setHello(int hello);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const MyEtherAppResp& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, MyEtherAppResp& obj) {obj.parsimUnpack(b);}

} // namespace inet

#endif // ifndef __INET_MYETHERMSG_M_H

