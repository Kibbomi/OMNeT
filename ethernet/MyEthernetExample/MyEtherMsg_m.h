//
// Generated file, do not edit! Created by nedtool 5.6 from inet/applications/ethernet/MyEthernetExample/MyEtherMsg.msg.
//

#ifndef __INET_MYETHERMSG_M_H
#define __INET_MYETHERMSG_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0506
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif

// dll export symbol
#ifndef INET_API
#  if defined(INET_EXPORT)
#    define INET_API  OPP_DLLEXPORT
#  elif defined(INET_IMPORT)
#    define INET_API  OPP_DLLIMPORT
#  else
#    define INET_API
#  endif
#endif


namespace inet {

class MyEtherAppReq;
class MyEtherAppResp;
class MyOffloadingReq;
class MyOffloadingResp;
class MyAvailabilityReq;
class MyAvailabilityResp;
} // namespace inet

#include "inet/common/INETDefs_m.h" // import inet.common.INETDefs

#include "inet/common/packet/chunk/Chunk_m.h" // import inet.common.packet.chunk.Chunk


namespace inet {

/**
 * Class generated from <tt>inet/applications/ethernet/MyEthernetExample/MyEtherMsg.msg:27</tt> by nedtool.
 * <pre>
 * //
 * // Request packet sent by ~EtherAppClient. Contains the number of bytes to be
 * // sent back as response; if this value is greater than ~1400, the reply
 * // will consist of several Ethernet frames. See also ~EtherAppResp.
 * //
 * class MyEtherAppReq extends FieldsChunk
 * {
 *     long requestId;
 *     long responseBytes;
 *     int hello;
 * }
 * </pre>
 */
class INET_API MyEtherAppReq : public ::inet::FieldsChunk
{
  protected:
    long requestId = 0;
    long responseBytes = 0;
    int hello = 0;

  private:
    void copy(const MyEtherAppReq& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const MyEtherAppReq&);

  public:
    MyEtherAppReq();
    MyEtherAppReq(const MyEtherAppReq& other);
    virtual ~MyEtherAppReq();
    MyEtherAppReq& operator=(const MyEtherAppReq& other);
    virtual MyEtherAppReq *dup() const override {return new MyEtherAppReq(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual long getRequestId() const;
    virtual void setRequestId(long requestId);
    virtual long getResponseBytes() const;
    virtual void setResponseBytes(long responseBytes);
    virtual int getHello() const;
    virtual void setHello(int hello);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const MyEtherAppReq& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, MyEtherAppReq& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>inet/applications/ethernet/MyEthernetExample/MyEtherMsg.msg:37</tt> by nedtool.
 * <pre>
 * //
 * // Packet sent back by ~EtherAppServer in response to an ~EtherAppReq.
 * //
 * class MyEtherAppResp extends FieldsChunk
 * {
 *     int requestId;
 *     int numFrames;
 *     int hello;
 * }
 * </pre>
 */
class INET_API MyEtherAppResp : public ::inet::FieldsChunk
{
  protected:
    int requestId = 0;
    int numFrames = 0;
    int hello = 0;

  private:
    void copy(const MyEtherAppResp& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const MyEtherAppResp&);

  public:
    MyEtherAppResp();
    MyEtherAppResp(const MyEtherAppResp& other);
    virtual ~MyEtherAppResp();
    MyEtherAppResp& operator=(const MyEtherAppResp& other);
    virtual MyEtherAppResp *dup() const override {return new MyEtherAppResp(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getRequestId() const;
    virtual void setRequestId(int requestId);
    virtual int getNumFrames() const;
    virtual void setNumFrames(int numFrames);
    virtual int getHello() const;
    virtual void setHello(int hello);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const MyEtherAppResp& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, MyEtherAppResp& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>inet/applications/ethernet/MyEthernetExample/MyEtherMsg.msg:45</tt> by nedtool.
 * <pre>
 * class MyOffloadingReq extends FieldsChunk
 * {
 *     int data;
 *     int cycle;
 *     int constraint;
 * }
 * </pre>
 */
class INET_API MyOffloadingReq : public ::inet::FieldsChunk
{
  protected:
    int data = 0;
    int cycle = 0;
    int constraint = 0;

  private:
    void copy(const MyOffloadingReq& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const MyOffloadingReq&);

  public:
    MyOffloadingReq();
    MyOffloadingReq(const MyOffloadingReq& other);
    virtual ~MyOffloadingReq();
    MyOffloadingReq& operator=(const MyOffloadingReq& other);
    virtual MyOffloadingReq *dup() const override {return new MyOffloadingReq(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getData() const;
    virtual void setData(int data);
    virtual int getCycle() const;
    virtual void setCycle(int cycle);
    virtual int getConstraint() const;
    virtual void setConstraint(int constraint);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const MyOffloadingReq& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, MyOffloadingReq& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>inet/applications/ethernet/MyEthernetExample/MyEtherMsg.msg:52</tt> by nedtool.
 * <pre>
 * class MyOffloadingResp extends FieldsChunk
 * {
 *     int data;
 * }
 * </pre>
 */
class INET_API MyOffloadingResp : public ::inet::FieldsChunk
{
  protected:
    int data = 0;

  private:
    void copy(const MyOffloadingResp& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const MyOffloadingResp&);

  public:
    MyOffloadingResp();
    MyOffloadingResp(const MyOffloadingResp& other);
    virtual ~MyOffloadingResp();
    MyOffloadingResp& operator=(const MyOffloadingResp& other);
    virtual MyOffloadingResp *dup() const override {return new MyOffloadingResp(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getData() const;
    virtual void setData(int data);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const MyOffloadingResp& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, MyOffloadingResp& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>inet/applications/ethernet/MyEthernetExample/MyEtherMsg.msg:57</tt> by nedtool.
 * <pre>
 * class MyAvailabilityReq extends FieldsChunk
 * {
 *     bool flag;
 * }
 * </pre>
 */
class INET_API MyAvailabilityReq : public ::inet::FieldsChunk
{
  protected:
    bool flag = false;

  private:
    void copy(const MyAvailabilityReq& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const MyAvailabilityReq&);

  public:
    MyAvailabilityReq();
    MyAvailabilityReq(const MyAvailabilityReq& other);
    virtual ~MyAvailabilityReq();
    MyAvailabilityReq& operator=(const MyAvailabilityReq& other);
    virtual MyAvailabilityReq *dup() const override {return new MyAvailabilityReq(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual bool getFlag() const;
    virtual void setFlag(bool flag);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const MyAvailabilityReq& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, MyAvailabilityReq& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>inet/applications/ethernet/MyEthernetExample/MyEtherMsg.msg:62</tt> by nedtool.
 * <pre>
 * class MyAvailabilityResp extends FieldsChunk
 * {
 *     int availability;
 * 	//float or double 
 * }
 * </pre>
 */
class INET_API MyAvailabilityResp : public ::inet::FieldsChunk
{
  protected:
    int availability = 0;

  private:
    void copy(const MyAvailabilityResp& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const MyAvailabilityResp&);

  public:
    MyAvailabilityResp();
    MyAvailabilityResp(const MyAvailabilityResp& other);
    virtual ~MyAvailabilityResp();
    MyAvailabilityResp& operator=(const MyAvailabilityResp& other);
    virtual MyAvailabilityResp *dup() const override {return new MyAvailabilityResp(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getAvailability() const;
    virtual void setAvailability(int availability);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const MyAvailabilityResp& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, MyAvailabilityResp& obj) {obj.parsimUnpack(b);}

} // namespace inet

#endif // ifndef __INET_MYETHERMSG_M_H

