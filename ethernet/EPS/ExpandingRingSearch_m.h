//
// Generated file, do not edit! Created by nedtool 5.6 from inet/applications/ethernet/EPS/ExpandingRingSearch.msg.
//

#ifndef __INET_EXPANDINGRINGSEARCH_M_H
#define __INET_EXPANDINGRINGSEARCH_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0506
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif

// dll export symbol
#ifndef INET_API
#  if defined(INET_EXPORT)
#    define INET_API  OPP_DLLEXPORT
#  elif defined(INET_IMPORT)
#    define INET_API  OPP_DLLIMPORT
#  else
#    define INET_API
#  endif
#endif


namespace inet {

class ERSReq;
class ERSResp;
} // namespace inet

#include "inet/common/INETDefs_m.h" // import inet.common.INETDefs

#include "inet/common/packet/chunk/Chunk_m.h" // import inet.common.packet.chunk.Chunk


namespace inet {

/**
 * Class generated from <tt>inet/applications/ethernet/EPS/ExpandingRingSearch.msg:23</tt> by nedtool.
 * <pre>
 * class ERSReq extends FieldsChunk
 * {
 *     //src,dest MacAddress already exist EthernetMacHeader..
 *     unsigned int TTL;
 *     unsigned char findTarget;	//define the target that will be found
 * }
 * </pre>
 */
class INET_API ERSReq : public ::inet::FieldsChunk
{
  protected:
    unsigned int TTL = 0;
    unsigned char findTarget = 0;

  private:
    void copy(const ERSReq& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const ERSReq&);

  public:
    ERSReq();
    ERSReq(const ERSReq& other);
    virtual ~ERSReq();
    ERSReq& operator=(const ERSReq& other);
    virtual ERSReq *dup() const override {return new ERSReq(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual unsigned int getTTL() const;
    virtual void setTTL(unsigned int TTL);
    virtual unsigned char getFindTarget() const;
    virtual void setFindTarget(unsigned char findTarget);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const ERSReq& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, ERSReq& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>inet/applications/ethernet/EPS/ExpandingRingSearch.msg:30</tt> by nedtool.
 * <pre>
 * class ERSResp extends FieldsChunk
 * {
 *     //src,dest MacAddress already exist EthernetMacHeader..
 *     unsigned char info;
 * 
 *     //if info is RSU
 *     //location information
 *     int y;
 *     int x;
 *     int coverage; //coverage information
 * 
 *     //if info is Edge Server
 *     unsigned int f;
 *     unsigned int capacity;
 *     //edge server dont need to have location information
 * 
 * }
 * </pre>
 */
class INET_API ERSResp : public ::inet::FieldsChunk
{
  protected:
    unsigned char info = 0;
    int y = 0;
    int x = 0;
    int coverage = 0;
    unsigned int f = 0;
    unsigned int capacity = 0;

  private:
    void copy(const ERSResp& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const ERSResp&);

  public:
    ERSResp();
    ERSResp(const ERSResp& other);
    virtual ~ERSResp();
    ERSResp& operator=(const ERSResp& other);
    virtual ERSResp *dup() const override {return new ERSResp(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual unsigned char getInfo() const;
    virtual void setInfo(unsigned char info);
    virtual int getY() const;
    virtual void setY(int y);
    virtual int getX() const;
    virtual void setX(int x);
    virtual int getCoverage() const;
    virtual void setCoverage(int coverage);
    virtual unsigned int getF() const;
    virtual void setF(unsigned int f);
    virtual unsigned int getCapacity() const;
    virtual void setCapacity(unsigned int capacity);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const ERSResp& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, ERSResp& obj) {obj.parsimUnpack(b);}

} // namespace inet

#endif // ifndef __INET_EXPANDINGRINGSEARCH_M_H

